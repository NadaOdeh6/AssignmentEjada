package apitest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class) 
public class APITests {
	 private static String accessToken;
     public String createdOrderId; 
     
	    @BeforeAll
	    public static void setup() {
	    	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMddHHmmssSSS");
	    	 LocalDateTime currentDate = LocalDateTime.now();
	    	 String formattedDateTime = currentDate.format(formatter);
	    	 
	    	 String name = "Nada" + formattedDateTime;
	    	 
	        RestAssured.baseURI = "https://simple-books-api.glitch.me";
	        System.out.println(name);
	        // Register the API client and obtain the access token
	        String requestBody = "{\n" +
	                "  \"clientName\": \"" + name + "\",\n" +
	                "  \"clientEmail\": \""+ name +"@example.com\"\n" +
	                "}";
	        
	        System.out.println(requestBody);

	        Response response = given()
	                .header("Content-Type", "application/json")
	                .body(requestBody)
	                .when()
	                .post("/api-clients/")  
	                .then()
	                .log().all()  // Log the response for debugging
	                .extract()
	                .response();

	        int statusCode = response.getStatusCode();

	        if (statusCode == 201) {
	            // Success: Extract and store the access token
	            accessToken = response.jsonPath().getString("accessToken");
	            System.out.println("Access token received: " + accessToken);
	        } else if (statusCode == 409) {
	            System.out.println("Client already registered. Please use a different email and name.");
	        } else if (statusCode == 404) {
	            System.out.println("The endpoint was not found. Please check the URL.");
	        } else {
	            System.out.println("Unexpected status code: " + statusCode);
	        }
	    }
	    
	    @Test
	    @Order(1) 
	    public void getAllBooks() {
	    	   Response response = given()
	    	            .auth()
	    	            .oauth2(accessToken)  // Bearer Token Authentication
	    	        .when()
	    	            .get("/books")
	    	        .then()
	    	            .statusCode(200)  
	    	            .extract()
	    	            .response();

	    	        System.out.println("Response: " + response.asString());
	    	    
		       
//	        given()
//	        .when()
//	            .get("/books")
//	        .then()
//	            .statusCode(200) // Expecting successful retrieval
//	            .body("size()", greaterThan(0)); // Check that there is at least one book
	    }
	    
	    @Test
	    @Order(2) 
	    public void testPostOrder() {
	        String requestBody = "{\n" +
	                "  \"bookId\": 1,\n" +
	                "  \"customerName\": \"John Doe\"\n" +
	                "}";

	        Response response = given()
	                .auth()
	                .oauth2(accessToken)  // Bearer Token Authentication
	                .header("Content-Type", "application/json")  // Set the Content-Type to JSON
	                .body(requestBody)  // Attach the request body
	            .when()
	                .post("/orders")  // POST request to the /orders endpoint
	            .then()
	                .statusCode(201)  // Expecting a 201 Created response
	                .body("created", equalTo(true))  // Validate that the response contains "created": true
	                .extract()
	                .response();  // Extract the response for further use
//	        ValidatableResponse response =  given()
//	            .header("Authorization", "Bearer " + accessToken)  // Use the access token here
//	            .header("Content-Type", "application/json")
//	            .body(requestBody)
//	            .when()
//	            .post("/orders")
//	            .then()
//	            .statusCode(201);
	            
	        
//	        Response response = given()
//		            .auth()
//		            .oauth2(accessToken) // Bearer Token Authentication
//		            .body(requestBody)
//		        .when()
//		            .post("/orders")
//		        .then()
//		            .statusCode(201) 
//		            .body("created", equalTo(true))
//		            .extract()
//		            .response();
	        
	        createdOrderId =  response.jsonPath().getString("orderId");
	        System.out.println("createdOrderId" + createdOrderId);
	        System.out.println(response);
	        
	    }
	    
	    @Test
	    @Order(3) 
	    public void getAllOrders() {
	        Response response = given()
	            .auth()
	            .oauth2(accessToken)  // Bearer Token Authentication
	        .when()
	            .get("/orders")
	        .then()
	            .statusCode(200)  // Expecting successful retrieval of orders
	            .extract()
	            .response();
	        
	        
	    }
	    
	    

	    @Test
	    @Order(4) 
	    public void testPatchOrder() {
	        String requestBody = "{\n" +
	                "  \"customerName\": \"Jane test\"\n" +
	                "}";


//	        given()
//	            .header("Authorization", "Bearer " + accessToken)  // Use the access token here
//	            .header("Content-Type", "application/json")
//	            .body(requestBody)
//	            .when()
//	            .patch("/orders/" + createdOrderId)
//	            .then()
//	            .statusCode(204);
	        
	        Response response = given()
		            .auth()
		            .oauth2(accessToken)   // Use the Bearer token here
	                .header("Content-Type", "application/json")  // Set Content-Type as JSON
	                .body(requestBody)  // Attach the request body
	            .when()
	                .patch("/orders/" + createdOrderId)  // Send PATCH request to update the order
	            .then()
	                .statusCode(204)
	                .extract()
	                .response();
	        
	        
	        System.out.println(response.getStatusCode());
	    }

	    @Test
	    @Order(5) 
	    public void testDeleteOrder() {

	    	Response response = given()
	                .header("Authorization", "Bearer " + accessToken)  // Use the Bearer token here
	            .when()
	                .delete("/orders/" + createdOrderId)  // Send DELETE request to delete the order
	            .then()
	                .statusCode(204)  // Expecting 204 No Content for a successful deletion
	                .extract()
	                .response(); 
	    	
	    	 System.out.println(response);
	    }
}
